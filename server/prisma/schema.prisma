generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String
  password   String
  admin      Boolean   @default(false)
  posts      Post[]
  likes      Like[]
  comments   Comment[]
  friends    Friend[]
  complaints Complaint[]
  actions    Action?
  avatar     Image?
  messages   Message[]
  groupmessages  GroupMessage[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("users")
}

model Hobbie {
  id         String    @id @default(uuid())
  text       String?
  image      String?
  user_id    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("hobbies")
}

model Image {
  id        String     @id @default(uuid())
  user_id   String     @unique
  group_id  String     @unique
  bio       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  group     Group         @relation(fields: [group_id], references: [id])
  user      User          @relation(fields: [user_id], references: [id])

  @@map("images")
}

model Action {
  id         String    @id @default(uuid())
  work       String?
  company    String?
  study      String?
  user_id    String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields:[user_id], references: [id])

  @@map("actions")
}

model Post {
  id         String    @id @default(uuid())
  text       String?
  image      String?
  user_id    String
  likes      Like[]
  comments   Comment[]
  complaints Complaint[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields:[user_id], references: [id])

  @@map("posts")
}

model Like {
  id         String    @id @default(uuid())
  happy      Int
  love       Int
  bad        Int
  angry      Int
  uau        Int
  user_id    String
  post_id    String
  comment_id String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  post       Post      @relation(fields: [post_id], references: [id])
  comment    Comment   @relation(fields: [comment_id], references: [id])

  @@map("likes")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  user_id    String
  post_id    String
  likes      Like[]
  notification  Notification[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  post       Post      @relation(fields: [post_id], references: [id])

  @@map("comments")
}

model Friend {
  id         String    @id @default(uuid())
  user_id    String
  friend_id  String
  Pending    Boolean
  since      DateTime
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields: [user_id], references: [id])

  @@map("friends")
}

model Complaint {
  id         String    @id @default(uuid())
  user_id    String
  post_id    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  post       Post      @relation(fields: [post_id], references: [id])

  @@map("complaints")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String
  image       Image?
  groupmessages_id GroupMessage[]
  notification  Notification[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("groups")
}


model Notification {
  id         String    @id @default(uuid())
  comment_id String
  user_id    String
  post_id    String
  group_id   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  comment    Comment   @relation(fields: [comment_id], references: [id])
  group      Group     @relation(fields: [group_id], references: [id])

  @@map("notifications")
}

model Message {
  id         String    @id @default(uuid())
  user_id    String
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields: [user_id], references: [id])

  @@map("messages")
}

model GroupMessage {
  id         String    @id @default(uuid())
  user_id    String
  group_id   String
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  group      Group     @relation(fields: [group_id], references: [id])

  @@map("groupmessages")
}